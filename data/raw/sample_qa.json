[
  {
    "question": "什么是人工智能？",
    "answer": "人工智能（Artificial Intelligence，简称AI）是指由人创造的机器所表现出的智能，通常通过计算机程序实现。它是计算机科学的一个分支，旨在开发能够执行通常需要人类智能的任务的系统，如视觉感知、语音识别、决策制定和语言翻译等。人工智能可以分为弱人工智能（专注于解决特定问题）和强人工智能（具有与人类相当的认知能力）。"
  },
  {
    "question": "这个智能体是如何工作的？",
    "answer": "这个智能体基于Python实现，采用OpenAI风格的接口设计。它使用消息一致性协议（MCP）而非函数调用来处理对话，通过分析用户意图、确定是否需要网络搜索、提取关键实体、检查对话历史一致性等步骤来维持连贯的对话。前端实现了异步流式显示，使文字能够按人分到对应聊天框逐步输出，提供更自然的对话体验。系统还集成了网络搜索功能，可以获取最新信息来增强回答质量。"
  },
  {
    "question": "如何训练这个智能体？",
    "answer": "训练这个智能体需要准备问答格式的数据集。系统支持多种输入格式，包括CSV、JSON和文本格式。训练过程首先预处理原始数据，将其转换为标准问答格式，然后分割为训练集和验证集。通过API接口可以启动训练，指定数据路径和训练轮数。训练完成后，模型会自动保存，并可用于后续的对话。系统的训练模块设计灵活，能够适应不同领域的知识库训练。"
  },
  {
    "question": "消息一致性协议(MCP)是什么？",
    "answer": "消息一致性协议(Message Coherence Protocol, MCP)是一种替代函数调用的对话管理方法，专注于维持对话的连贯性和上下文理解。它通过以下步骤工作：1)从用户消息中检测意图；2)确定是否需要网络搜索；3)提取相关实体；4)检查与对话历史的一致性；5)选择适当的响应策略。MCP的优势在于能够处理复杂的上下文依赖，理解模糊的用户意图，并生成更自然、连贯的回复，无需依赖预定义的函数调用结构。"
  },
  {
    "question": "这个智能体能做什么？",
    "answer": "这个智能体具有多种功能：1)进行自然对话交流；2)通过集成的网络搜索获取最新信息；3)回答用户问题并提供详细解释；4)保持对话上下文的连贯性；5)提供流式文本响应，增强用户体验；6)支持问答格式的知识库训练，可以定制特定领域的知识；7)通过消息一致性协议(MCP)理解复杂意图；8)提供OpenAI风格的API接口，方便集成到其他应用中。系统的模块化设计使其易于扩展和添加新功能。"
  },
  {
    "question": "如何使用网络搜索功能？",
    "answer": "网络搜索功能在智能体检测到需要最新信息或特定事实时自动触发。当用户提问包含需要查找信息的关键词（如"查找"、"搜索"、"最新"等）或询问特定事实时，系统会：1)通过MCP识别搜索意图；2)构建优化的搜索查询；3)调用搜索API获取结果；4)整合搜索结果到回答中。开发者可以通过修改utils/web_search.py文件配置不同的搜索API，如Google Custom Search、Bing Search或DuckDuckGo等。在实际部署时，需要配置相应的API密钥。"
  },
  {
    "question": "如何部署这个应用？",
    "answer": "部署这个应用的步骤如下：1)克隆GitHub仓库到服务器；2)安装所需依赖：`pip install -r requirements.txt`；3)创建必要的目录结构：`python init_project.py`；4)配置网络搜索API（如需使用）；5)准备并放置训练数据到data/raw目录；6)处理训练数据：`python -m model.training`；7)启动应用服务器：`python app.py`。默认情况下，应用将在本地的8000端口运行。对于生产环境，推荐使用Nginx作为反向代理，并配置SSL证书以启用HTTPS。可以使用Gunicorn或Uvicorn作为WSGI服务器来提高性能。"
  },
  {
    "question": "这个项目的前端如何实现异步显示？",
    "answer": "前端的异步显示实现主要依靠WebSocket技术和流式响应处理。当用户发送消息时，系统会：1)通过WebSocket连接发送请求；2)后端的agent.process_message_stream方法以异步生成器形式逐步产生响应片段；3)每个片段通过WebSocket发送到前端；4)前端的chat.js接收这些片段并动态更新DOM；5)stream.js负责处理文本格式化，如代码高亮和Markdown渲染；6)CSS动画提供打字机效果，增强用户体验。这种设计使得响应能够实时显示，而不必等待完整回复生成，大大提升了对话的自然流畅度。"
  }
]
